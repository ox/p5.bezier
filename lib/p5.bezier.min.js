p5bezierAccuracyListAll=[.2,.1,.05,.04,.02,.01,.008,.005,.002,.001],p5.prototype.newBezier=function(a,b,c){b=b||"OPEN",c=c||7;var e=p5bezierAccuracyListAll[c];if(!Array.isArray(a))throw"newBezier() function expects an array, got %s.",typeof a;else{var f=a[0].length;for(var g of a)if(!Array.isArray(a)||g.length!=f)throw"One or more points in the array are not input correctly.";"CLOSE"==b&&a.push(a[0]);var h=a.length,j=h-1;if(beginShape(),2==f){var k,l,m,n;for(m=0;1>=m;m+=e){for(k=0,l=0,n=0;n<=j;n++)k+=factorial(j)/(factorial(n)*factorial(j-n))*pow(1-m,j-n)*pow(m,n)*a[n][0],l+=factorial(j)/(factorial(n)*factorial(j-n))*pow(1-m,j-n)*pow(m,n)*a[n][1];vertex(k,l)}var o=a.slice(-1)[0];vertex(o[0],o[1])}else if(3==f){var m,n,p,q=[0,0,0];for(m=0;1>=m;m+=e){for(q[0]=0,q[1]=0,q[2]=0,n=0;n<=j;n++)for(p=0;3>p;p++)q[p]+=factorial(j)/(factorial(n)*factorial(j-n))*pow(1-m,j-n)*pow(m,n)*a[n][p];vertex(q[0],q[1],q[2])}var o=a.slice(-1)[0];vertex(o[0],o[1],o[2])}if("OPEN"==b)endShape();else if("CLOSE"==b)endShape(CLOSE);else throw"Close Type Error. A bezier curve can only be either OPEN or CLOSE."}},p5.prototype.newBezierObj=function(a,b="OPEN",c=7){var d=p5bezierAccuracyListAll[c];if(!Array.isArray(a))throw"newBezier() function expects an array, got %s.",typeof a;else{var e=a[0].length;for(var f of a)if(!Array.isArray(a)||f.length!=e)throw"One or more points in the array are not input correctly.";var g=new BezierCurve(a,b,d,e);return g}};function factorial(b){if(0==b||1==b)return 1;return 1<b?b*factorial(b-1):void 0}class BezierCurve{constructor(a,b,c,d){if(2!=d&&3!=d)throw"Dimension Error. The bezier curve is %d-dimensional and doesn't belong to our world.",d;if(this.controlPoints=a,"CLOSE"==b)this.controlPoints.push(a[0]),this.closeType="CLOSE";else if("OPEN"==b)this.closeType="OPEN";else throw"Close Type Error. A bezier curve can only be either OPEN or CLOSE.";this.dimension=d,this.increment=c,this.vertexList=[],this.vertexListLen=0,this.p=this.controlPoints.length,this.n=this.p-1,this._buildVertexList()}_buildVertexList(){if(this.vertexList=[],2==this.dimension){var a,b,c,e;for(c=0;1>=c;c+=this.increment){for(a=0,b=0,e=0;e<=this.n;e++)a+=factorial(this.n)/(factorial(e)*factorial(this.n-e))*pow(1-c,this.n-e)*pow(c,e)*this.controlPoints[e][0],b+=factorial(this.n)/(factorial(e)*factorial(this.n-e))*pow(1-c,this.n-e)*pow(c,e)*this.controlPoints[e][1];this.vertexList.push([a,b])}}else if(3==this.dimension){var c,e,f,g=[0,0,0];for(c=0;1>=c;c+=this.increment){for(g[0]=0,g[1]=0,g[2]=0,e=0;e<=this.n;e++)for(f=0;3>f;f++)g[f]+=factorial(this.n)/(factorial(e)*factorial(this.n-e))*pow(1-c,this.n-e)*pow(c,e)*this.controlPoints[e][f];this.vertexList.push(g)}}return this.dimension=this.vertexList[0].length,this.vertexListLen=this.vertexList.length,this.vertexList}_addVertex(a){if(2==this.dimension)vertex(a[0],a[1]);else if(3==this.dimension)vertex(a[0],a[1],a[2]);else throw"Vertices can only be in 2D or 3D space."}_distVertex(a,b){if(2==this.dimension)return dist(a[0],a[1],b[0],b[1]);return 3==this.dimension?dist(a[0],a[1],a[2],b[0],b[1],b[2]):void 0}draw(a=0){if(0==a){beginShape();for(var b of this.vertexList)this._addVertex(b);var c=this.controlPoints.slice(-1)[0];this._addVertex(c),"OPEN"==this.closeType?endShape():"CLOSE"==this.closeType&&endShape(CLOSE)}else if(Array.isArray(a)&&2==a.length&&.008>=this.increment){var d=abs(a[0]),e=d+abs(a[1]),f=0,g=0,h=this.vertexList[0],i=!0;push(),noFill(),beginShape(),this._addVertex(this.vertexList[0]);for(var b=1;b<this.vertexListLen;b++)f+=this._distVertex(h,this.vertexList[b]),g=f%e,g<=d&&i?this._addVertex(this.vertexList[b]):g>d&&g<=e&&i?(endShape(),i=!1):g<=d&&!i&&(beginShape(),this._addVertex(this.vertexList[b]),i=!0),h=this.vertexList[b];i&&endShape(),pop()}else if(.008<this.increment)throw"Fidelity is too low for a dash line. It should be at least 6.";else throw"Your dash array input is not valid. Make sure it's an array of two numbers."}update(a){if(a.length!=this.controlPoints)throw"The number of points changed.";else if(this.controlPoints==a);else this.controlPoints=a,this._buildVertexList()}shortest(a,b,c=0){var d,e=-1,f=0;for(var g of this.vertexList)-1==e?(e=this._distVertex(g,[a,b,c]),d=g):(f=this._distVertex(g,[a,b,c]),e>f&&(e=f,d=g));return d}}
